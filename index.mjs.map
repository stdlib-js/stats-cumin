{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\n\nimport dtypes from '@stdlib/ndarray-dtypes';\nimport gcumin from '@stdlib/stats-base-ndarray-cumin';\nimport dcumin from '@stdlib/stats-base-ndarray-dcumin';\nimport scumin from '@stdlib/stats-base-ndarray-scumin';\nimport factory from '@stdlib/ndarray-base-unary-strided1d-dispatch-factory';\n\n\n// VARIABLES //\n\nvar idtypes = dtypes( 'real_and_generic' );\nvar odtypes = dtypes( 'real_and_generic' );\nvar policies = {\n\t'output': 'same',\n\t'casting': 'none'\n};\nvar table = {\n\t'types': [\n\t\t'float64', 'float64', // input, output\n\t\t'float32', 'float32'  // input, output\n\t],\n\t'fcns': [\n\t\tdcumin,\n\t\tscumin\n\t],\n\t'default': gcumin\n};\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum value along one or more ndarray dimensions.\n*\n* @name cumin\n* @type {Function}\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, -3.0, 4.0, -5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = cumin( x );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( out );\n* // returns [ [ [ 1.0, 1.0 ] ], [ [ -3.0, -3.0 ] ], [ [ -5.0, -5.0 ] ] ]\n*/\nvar cumin = factory( table, [ idtypes ], odtypes, policies );\n\n\n// EXPORTS //\n\nexport default cumin;\n"],"names":["cumin","factory","types","fcns","dcumin","scumin","default","gcumin","dtypes","output","casting"],"mappings":";;geAiCA,IAgEIA,EAAQC,EA1DA,CACXC,MAAS,CACR,UAAW,UACX,UAAW,WAEZC,KAAQ,CACPC,EACAC,GAEDC,QAAWC,GAiDgB,CAhEdC,EAAQ,qBACRA,EAAQ,oBACP,CACdC,OAAU,OACVC,QAAW"}